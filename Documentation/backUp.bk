--
-- PostgreSQL database dump
--

-- Dumped from database version 12.1
-- Dumped by pg_dump version 12.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: checknewplayer(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checknewplayer(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
numberOFRows int;
BEGIN
SELECT COUNT(*) INTO numberOFRows FROM players WHERE username = nameofuser;
IF numberOfRows = 1 THEN RETURN false;
ELSE RETURN true;
END IF;
END;
$$;


ALTER FUNCTION public.checknewplayer(nameofuser text) OWNER TO postgres;

--
-- Name: createagame(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createagame(firstuser text, seconduser text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
Numberofgames int;
BEGIN 
SELECT COUNT (game_id) INTO Numberofgames from gamelog;
Numberofgames = Numberofgames + 1;
INSERT INTO gamelog (game_id, homePlayer,opponentplayer, startGameDate, isFinished,savedgame) VALUES ( Numberofgames , firstuser,seconduser,now(),false,ARRAY[45,45,45,45,45,45,45,45,45]);
Update players set gameId = Numberofgames where username in (firstuser,seconduser);
RETURN  Numberofgames;
END;
$$;


ALTER FUNCTION public.createagame(firstuser text, seconduser text) OWNER TO postgres;

--
-- Name: createplayer(text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
INSERT INTO players VALUES (nameofuser,playerpassword,firstname,lastname,false,0,false,NULL);
END;
$$;


ALTER FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text) OWNER TO postgres;

--
-- Name: createplayer(text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text, playerstatus boolean) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
INSERT INTO players VALUES (nameofuser,playerpassword,firstname,lastname,false,0,false,NULL);
END;
$$;


ALTER FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text, playerstatus boolean) OWNER TO postgres;

--
-- Name: endgame(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.endgame(gamenumber integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
Nowtime timestamp;
BEGIN
Update players set gameId = NULL WHERE gameid = gamenumber;
Nowtime = now();
Update gamelog set endGameDate = nowtime , isFinished = true where game_id = gamenumber;
End;
$$;


ALTER FUNCTION public.endgame(gamenumber integer) OWNER TO postgres;

--
-- Name: getsaveddata(integer, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getsaveddata(newgameid integer, name0fhome text, nameofopponent text) RETURNS TABLE(field1 integer, field2 integer, field3 integer, field4 integer, field5 integer, field6 integer, field7 integer, field8 integer, field9 integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
gamenumber  int;
BEGIN
SELECT game_id  INTO gamenumber FROM gamelog WHERE isFinished  = false and homeplayer = name0fHome and opponentPlayer = nameOfOpponent OR homeplayer = nameOfOpponent and opponentPlayer = name0fHome LIMIT 1;
DELETE FROM gamelog WHERE game_id  = newgameId;
UPDATE players set gameid = newgameId WHERE username IN (name0fHome, nameOfOpponent);
RETURN QUERY SELECT savedGame[1], savedGame[2], savedGame[3], savedGame[4], savedGame[5], savedGame[6], savedGame[7], savedGame[8], savedGame[9]  FROM gamelog WHERE game_id = gamenumber;
END;
$$;


ALTER FUNCTION public.getsaveddata(newgameid integer, name0fhome text, nameofopponent text) OWNER TO postgres;

--
-- Name: isplayeronline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.isplayeronline(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
statusofplayer boolean;
BEGIN
SELECT status into statusofplayer from players where username = nameofuser;RETURN statusofplayer;
END;
$$;


ALTER FUNCTION public.isplayeronline(nameofuser text) OWNER TO postgres;

--
-- Name: isplaying(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.isplaying(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
isPlayingNow boolean;
BEGIN
SELECT isPlaying INTO isPlayingNow FROM players WHERE username = nameofuser;
RETURN  isPlayingNow;
END;
$$;


ALTER FUNCTION public.isplaying(nameofuser text) OWNER TO postgres;

--
-- Name: logincheck(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.logincheck(nameofuser text, playerpassword text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
numberOFRows int;
BEGIN
SELECT COUNT (*) INTO numberOFRows FROM players WHERE username = nameofuser AND password = playerpassword;
IF numberOFRows = 1 THEN RETURN true;
ELSE RETURN false;
END IF;
END;
$$;


ALTER FUNCTION public.logincheck(nameofuser text, playerpassword text) OWNER TO postgres;

--
-- Name: makeallplayersoffline(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.makeallplayersoffline() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
BEGIN
UPDATE players SET status = false , isPlaying = false;
RETURN true;
END;
$$;


ALTER FUNCTION public.makeallplayersoffline() OWNER TO postgres;

--
-- Name: makeplayeronline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.makeplayeronline(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET status = true WHERE username = nameofuser;
RETURN true;
END;
$$;


ALTER FUNCTION public.makeplayeronline(nameofuser text) OWNER TO postgres;

--
-- Name: retrieveplayers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.retrieveplayers() RETURNS TABLE(userplayer text, statusofplayer boolean, scoreofplayer integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
RETURN QUERY SELECT username,status,score from players;
END;
$$;


ALTER FUNCTION public.retrieveplayers() OWNER TO postgres;

--
-- Name: returnscoreplayer(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.returnscoreplayer(nameofuser text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
playerScore int;
BEGIN
SELECT score INTO playerScore FROM players WHERE username = nameOfUser;
RETURN playerScore;
END;
$$;


ALTER FUNCTION public.returnscoreplayer(nameofuser text) OWNER TO postgres;

--
-- Name: setisplayerplaying(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.setisplayerplaying(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET isplaying = true WHERE username = nameOfUser;
RETURN true;
END;
$$;


ALTER FUNCTION public.setisplayerplaying(nameofuser text) OWNER TO postgres;

--
-- Name: setmove(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.setmove(fieldnumber integer, sign integer, gamenumber integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE gamelog SET savedgame[fieldnumber] = sign where game_id = gamenumber;
END ;
$$;


ALTER FUNCTION public.setmove(fieldnumber integer, sign integer, gamenumber integer) OWNER TO postgres;

--
-- Name: updatescoreoffline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.updatescoreoffline(nameofuser text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET score = score + 5 WHERE username = nameofuser;
END;
$$;


ALTER FUNCTION public.updatescoreoffline(nameofuser text) OWNER TO postgres;

--
-- Name: updatescoreonline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.updatescoreonline(nameofuser text) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare
begin
update players set score = score + 20 where username = nameofuser;
end;
$$;


ALTER FUNCTION public.updatescoreonline(nameofuser text) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: gamelog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gamelog (
    game_id integer NOT NULL,
    homeplayer text,
    opponentplayer text,
    startgamedate timestamp without time zone,
    endgamedate timestamp without time zone,
    isfinished boolean,
    savedgame integer[]
);


ALTER TABLE public.gamelog OWNER TO postgres;

--
-- Name: gamenumber; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gamenumber (
    game_id integer
);


ALTER TABLE public.gamenumber OWNER TO postgres;

--
-- Name: players; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.players (
    username text NOT NULL,
    password text,
    fname text,
    lname text,
    status boolean,
    score integer,
    isplaying boolean,
    gameid integer
);


ALTER TABLE public.players OWNER TO postgres;

--
-- Data for Name: gamelog; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.gamelog (game_id, homeplayer, opponentplayer, startgamedate, endgamedate, isfinished, savedgame) FROM stdin;
1	2	1	2020-02-23 10:49:58.838829	\N	f	{88,45,79,45,45,45,45,45,45}
17	2	1	2020-02-23 16:57:17.600296	2020-02-23 16:57:24.593487	t	{88,88,88,79,45,79,45,45,45}
2	2	1	2020-02-23 15:08:09.034459	\N	f	{45,45,45,45,45,45,45,45,45}
3	2	1	2020-02-23 15:09:43.855661	\N	f	{45,45,45,45,45,45,45,45,45}
4	2	1	2020-02-23 15:12:34.565696	\N	f	{45,45,45,45,45,45,45,45,45}
5	2	1	2020-02-23 15:14:08.010046	\N	f	{45,45,45,45,45,45,45,45,45}
6	2	1	2020-02-23 15:15:58.152677	\N	f	{45,45,45,45,45,45,45,45,45}
7	1	2	2020-02-23 15:22:07.999109	\N	f	{88,45,45,45,79,45,45,45,45}
8	2	1	2020-02-23 16:01:15.629558	\N	f	{88,45,79,88,45,45,88,79,45}
18	2	1	2020-02-23 17:58:33.485686	\N	f	{88,45,45,45,45,45,45,45,45}
9	2	1	2020-02-23 16:33:31.24052	2020-02-23 16:35:45.322326	t	{88,88,88,45,79,45,79,45,45}
10	2	1	2020-02-23 16:38:50.72596	\N	f	{45,45,45,45,45,45,45,45,45}
11	2	1	2020-02-23 16:42:30.829792	\N	f	{45,45,45,45,45,45,45,45,45}
19	2	1	2020-02-23 18:00:38.118246	2020-02-23 18:00:52.780483	t	{88,88,88,45,45,79,45,79,45}
12	2	1	2020-02-23 16:45:31.90749	\N	f	{88,88,88,79,79,45,45,45,45}
13	2	1	2020-02-23 16:49:29.615932	\N	f	{88,88,88,45,79,45,45,79,45}
20	2	1	2020-02-23 18:16:18.454357	2020-02-23 18:16:39.722998	t	{88,88,88,45,79,79,45,45,45}
21	2	1	2020-02-23 21:15:23.826978	\N	f	{45,45,45,45,45,45,45,45,45}
14	2	1	2020-02-23 16:50:30.003004	\N	f	{88,88,88,45,79,79,45,45,45}
22	1	2	2020-02-23 22:18:36.693563	\N	f	{45,45,45,45,45,45,45,45,45}
23	2	1	2020-02-23 22:20:11.39934	\N	f	{45,45,45,45,45,45,45,45,45}
15	2	1	2020-02-23 16:53:38.881723	\N	f	{88,88,88,45,79,79,45,45,45}
16	2	1	2020-02-23 16:54:49.157324	2020-02-23 16:54:55.689162	t	{88,88,88,45,79,79,45,45,45}
\.


--
-- Data for Name: gamenumber; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.gamenumber (game_id) FROM stdin;
10
\.


--
-- Data for Name: players; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.players (username, password, fname, lname, status, score, isplaying, gameid) FROM stdin;
amr	amr	amr	amr	f	5	f	\N
2	2	mayar	hassan	f	100	f	23
1	1	amr	walid	t	30	t	23
\.


--
-- Name: gamelog gamelog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gamelog
    ADD CONSTRAINT gamelog_pkey PRIMARY KEY (game_id);


--
-- Name: players players_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.players
    ADD CONSTRAINT players_pkey PRIMARY KEY (username);


--
-- PostgreSQL database dump complete
--

