--
-- PostgreSQL database dump
--

-- Dumped from database version 12.1
-- Dumped by pg_dump version 12.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: checknewplayer(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.checknewplayer(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
numberOFRows int;
BEGIN
SELECT COUNT(*) INTO numberOFRows FROM players WHERE username = nameofuser;
IF numberOfRows = 1 THEN RETURN false;
ELSE RETURN true;
END IF;
END;
$$;


ALTER FUNCTION public.checknewplayer(nameofuser text) OWNER TO postgres;

--
-- Name: createagame(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createagame(firstuser text, seconduser text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
Numberofgames int;
BEGIN 
SELECT COUNT (game_id) INTO Numberofgames from gamelog;
Numberofgames = Numberofgames + 1;
INSERT INTO gamelog (game_id, homePlayer,opponentplayer, startGameDate, isFinished,savedgame) VALUES ( Numberofgames , firstuser,seconduser,now(),false,ARRAY[45,45,45,45,45,45,45,45,45]);
Update players set gameId = Numberofgames , isplaying = true where username in (firstuser,seconduser);
RETURN  Numberofgames;
END;
$$;


ALTER FUNCTION public.createagame(firstuser text, seconduser text) OWNER TO postgres;

--
-- Name: createplayer(text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
INSERT INTO players VALUES (nameofuser,playerpassword,firstname,lastname,false,0,false,NULL);
END;
$$;


ALTER FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text) OWNER TO postgres;

--
-- Name: createplayer(text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text, playerstatus boolean) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
INSERT INTO players VALUES (nameofuser,playerpassword,firstname,lastname,false,0,false,NULL);
END;
$$;


ALTER FUNCTION public.createplayer(nameofuser text, playerpassword text, firstname text, lastname text, playerstatus boolean) OWNER TO postgres;

--
-- Name: endgame(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.endgame(gamenumber integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
Nowtime timestamp;
BEGIN
Update players set gameId = NULL , isplaying = false WHERE gameid = gamenumber;
Nowtime = now();
Update gamelog set endGameDate = nowtime , isFinished = true where game_id = gamenumber;
End;
$$;


ALTER FUNCTION public.endgame(gamenumber integer) OWNER TO postgres;

--
-- Name: getsaveddata(integer, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getsaveddata(newgameid integer, name0fhome text, nameofopponent text) RETURNS TABLE(fieldid integer, field1 integer, field2 integer, field3 integer, field4 integer, field5 integer, field6 integer, field7 integer, field8 integer, field9 integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
gamenumber  int;
BEGIN
SELECT game_id INTO gamenumber  FROM gamelog WHERE isFinished  = false and homeplayer in (name0fHome,nameofopponent) and opponentplayer in (name0fHome,nameofopponent) and (savedgame @> ARRAY[88] OR savedgame @> ARRAY[79] ) LIMIT 1;
IF gamenumber  > 0 THEN
UPDATE players set gameid = newgameId WHERE username IN (name0fHome,nameOfOpponent);
RETURN QUERY SELECT game_id,savedGame[1], savedGame[2], savedGame[3], savedGame[4], savedGame[5], savedGame[6], savedGame[7], savedGame[8], savedGame[9]  FROM gamelog WHERE game_id = gamenumber;
ELSE RETURN NEXT;
END IF;
END;
$$;


ALTER FUNCTION public.getsaveddata(newgameid integer, name0fhome text, nameofopponent text) OWNER TO postgres;

--
-- Name: isplayeronline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.isplayeronline(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
statusofplayer boolean;
BEGIN
SELECT status into statusofplayer from players where username = nameofuser;RETURN statusofplayer;
END;
$$;


ALTER FUNCTION public.isplayeronline(nameofuser text) OWNER TO postgres;

--
-- Name: isplaying(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.isplaying(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
isPlayingNow boolean;
BEGIN
SELECT isPlaying INTO isPlayingNow FROM players WHERE username = nameofuser;
RETURN  isPlayingNow;
END;
$$;


ALTER FUNCTION public.isplaying(nameofuser text) OWNER TO postgres;

--
-- Name: isplayingoff(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.isplayingoff(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
UPDATE players SET isPlaying = false WHERE username = nameOfUser;
RETURN false;
END;
$$;


ALTER FUNCTION public.isplayingoff(nameofuser text) OWNER TO postgres;

--
-- Name: logincheck(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.logincheck(nameofuser text, playerpassword text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
numberOFRows int;
BEGIN
SELECT COUNT (*) INTO numberOFRows FROM players WHERE username = nameofuser AND password = playerpassword;
IF numberOFRows = 1 THEN RETURN true;
ELSE RETURN false;
END IF;
END;
$$;


ALTER FUNCTION public.logincheck(nameofuser text, playerpassword text) OWNER TO postgres;

--
-- Name: makeallplayersoffline(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.makeallplayersoffline() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE 
BEGIN
UPDATE players SET status = false , isPlaying = false;
RETURN true;
END;
$$;


ALTER FUNCTION public.makeallplayersoffline() OWNER TO postgres;

--
-- Name: makeplayeroffline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.makeplayeroffline(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
UPDATE players SET status = false , isPlaying = false WHERE username = nameOfUser;
RETURN true;
END;
$$;


ALTER FUNCTION public.makeplayeroffline(nameofuser text) OWNER TO postgres;

--
-- Name: makeplayeronline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.makeplayeronline(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET status = true WHERE username = nameofuser;
RETURN true;
END;
$$;


ALTER FUNCTION public.makeplayeronline(nameofuser text) OWNER TO postgres;

--
-- Name: retrieveplayers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.retrieveplayers() RETURNS TABLE(userplayer text, statusofplayer boolean, scoreofplayer integer, isplayingnow boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
RETURN QUERY SELECT username,status,score,isplaying from players;
END;
$$;


ALTER FUNCTION public.retrieveplayers() OWNER TO postgres;

--
-- Name: returnscoreplayer(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.returnscoreplayer(nameofuser text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE 
playerScore int;
BEGIN
Update players set isplaying = false where username = nameOfUser;
SELECT score INTO playerScore FROM players WHERE username = nameOfUser;
RETURN playerScore;
END;
$$;


ALTER FUNCTION public.returnscoreplayer(nameofuser text) OWNER TO postgres;

--
-- Name: setisplayerplaying(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.setisplayerplaying(nameofuser text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET isplaying = true WHERE username = nameOfUser;
RETURN true;
END;
$$;


ALTER FUNCTION public.setisplayerplaying(nameofuser text) OWNER TO postgres;

--
-- Name: setmove(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.setmove(fieldnumber integer, sign integer, gamenumber integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE gamelog SET savedgame[fieldnumber] = sign where game_id = gamenumber;
END ;
$$;


ALTER FUNCTION public.setmove(fieldnumber integer, sign integer, gamenumber integer) OWNER TO postgres;

--
-- Name: updatescoreoffline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.updatescoreoffline(nameofuser text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
UPDATE players SET score = score + 5, isplaying = false WHERE username = nameOfUser;
END;
$$;


ALTER FUNCTION public.updatescoreoffline(nameofuser text) OWNER TO postgres;

--
-- Name: updatescoreonline(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.updatescoreonline(nameofuser text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN 
UPDATE players SET score = score + 20, isplaying = false WHERE username = nameOfUser;
END;
$$;


ALTER FUNCTION public.updatescoreonline(nameofuser text) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: gamelog; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gamelog (
    game_id integer NOT NULL,
    homeplayer text,
    opponentplayer text,
    startgamedate timestamp without time zone,
    endgamedate timestamp without time zone,
    isfinished boolean,
    savedgame integer[]
);


ALTER TABLE public.gamelog OWNER TO postgres;

--
-- Name: players; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.players (
    username text NOT NULL,
    password text,
    fname text,
    lname text,
    status boolean,
    score integer,
    isplaying boolean,
    gameid integer
);


ALTER TABLE public.players OWNER TO postgres;

--
-- Data for Name: gamelog; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.gamelog (game_id, homeplayer, opponentplayer, startgamedate, endgamedate, isfinished, savedgame) FROM stdin;
\.


--
-- Data for Name: players; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.players (username, password, fname, lname, status, score, isplaying, gameid) FROM stdin;
\.


--
-- Name: gamelog gamelog_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gamelog
    ADD CONSTRAINT gamelog_pkey PRIMARY KEY (game_id);


--
-- Name: players players_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.players
    ADD CONSTRAINT players_pkey PRIMARY KEY (username);


--
-- PostgreSQL database dump complete
--

